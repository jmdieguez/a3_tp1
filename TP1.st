Object subclass: #AlgoVid	instanceVariableNames: 'colegios burbujas personas'	classVariableNames: ''	package: 'TP1'!!AlgoVid methodsFor: 'initialization' stamp: 'MANU 5/13/2021 21:11'!initialize	colegios := OrderedCollection new.	burbujas := OrderedCollection new.	personas := OrderedCollection new.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:36'!diagnosticoDe: unNombre	| unaPersona diagnostico |	unaPersona:= self buscarPersona: unNombre.	diagnostico := Diagnostico new setSintomas: unaPersona getSintomas.	^ (diagnostico estadoCovid).! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:36'!nuevaBurbuja: unNombreDeBurbuja 	burbujas add: (Burbuja new setNombre: unNombreDeBurbuja).! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'mau 6/21/2021 16:47'!contactoEstrechoEntre: unNombre y: otroNombre	"Recibe dos nombres y evalua su estado de Covid. En el caso de que una no de Negativo, 	se a√±ade a la coleccion de contactos estrechos sospechosos/positivos de la otra persona."	| diagnostico1 diagnostico2 unaPersona otraPersona |	diagnostico1 := self diagnosticoDe: (unNombre).	diagnostico2 := self diagnosticoDe: (otroNombre).	unaPersona := self buscarPersona: unNombre.	otraPersona := self buscarPersona: otroNombre.	(diagnostico2 = 'Negativo') ifFalse: [unaPersona agregarContacto: otraPersona].	(diagnostico1 = 'Negativo') ifFalse: [otraPersona agregarContacto: unaPersona].! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:36'!esPersonaDeRiesgo: unNombre	| unaPersona |	unaPersona:= self buscarPersona: unNombre.	unaPersona esRiesgo.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:36'!nuevoColegio: unNombreDeColegio 	colegios add: (Colegio new setNombre: unNombreDeColegio).! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:35'!buscarColegio: unNombreDeColegio		| unColegio |	unColegio:= [colegios detect: [ :colegio | colegio getNombre = unNombreDeColegio ]] on: NotFound do: 	[ColegioNoEncontradoError signal].	^unColegio! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:35'!buscarBurbuja: unNombreDeBurbuja 		| unaBurbuja |	unaBurbuja:= [burbujas detect: [ :burbuja | burbuja getNombre = unNombreDeBurbuja]] on: NotFound do: 	[BurbujaNoEncontradaError signal].	^unaBurbuja! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:36'!puedeCircular: unNombre 	| unaPersona|	unaPersona:= self buscarPersona: unNombre.	^(unaPersona puedeCircular).! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'mau 6/21/2021 13:25'!estaVacunadx: unNombre 		| unaPersona|	unaPersona:= self buscarPersona: unNombre.	unaPersona esVacunadx.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:36'!esPersonalEsencial: unNombre 		| unaPersona |	unaPersona:= self buscarPersona: unNombre.	unaPersona esEsencial.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:35'!agregarSintoma: unSintoma a: unNombre	| unaPersona |	unaPersona:= self buscarPersona: unNombre.	unaPersona agregarSintoma: unSintoma. ! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'mau 6/21/2021 13:26'!agregarA: unNombre aLaBurbuja: unNombreDeBurbuja  		| unaPersona unaBurbuja |	unaPersona:= self buscarPersona: unNombre.	unaBurbuja:= self buscarBurbuja: unNombreDeBurbuja.	unaBurbuja agregarPersona: unaPersona.	unaPersona agregarBurbuja: unaBurbuja.	! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:35'!buscarPersona: unNombre	| unaPersona |	unaPersona:= [personas detect: [ :persona | persona getNombre = unNombre ]] on: NotFound do: [ 	PersonaNoEncontradaError signal].	^unaPersona! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:35'!agregarA: unNombreDeBurbuja alColegio: unNombreDeColegio  	| unaBurbuja unColegio |	unColegio:= self buscarColegio: unNombreDeColegio.	unaBurbuja:= self buscarBurbuja: unNombreDeBurbuja.	unColegio agregarBurbuja: unaBurbuja.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:35'!burbujaPinchada: unNombreDeBurbuja	| unaBurbuja |	unaBurbuja:= self buscarBurbuja: unNombreDeBurbuja.	^unaBurbuja estaPinchada.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:36'!clasesPresencialesEn: unNombreDeColegio	| unColegio |	unColegio:= self buscarColegio: unNombreDeColegio.	^unColegio presencialidad.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:36'!nuevaPersona: unNombre	personas add: (Persona new setNombre: unNombre).! !Object subclass: #Burbuja	instanceVariableNames: 'nombre personas'	classVariableNames: ''	package: 'TP1'!!Burbuja methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 16:35'!getNombre	^nombre! !!Burbuja methodsFor: 'as yet unclassified' stamp: 'mau 6/21/2021 13:27'!estaPinchada	"Colecciona diagnosticos inmediatos de las personas que contiene la burbuja. Devuelve true o false 	dependiendo de si existe un diagnostico cuyo estadoCovid sea 'Positivo'. "	| hayUnPositivo diagnosticos |	diagnosticos := personas collect: [ :persona | Diagnostico new setSintomas: (persona getSintomas). ].	hayUnPositivo := diagnosticos anySatisfy: [ :diagnostico | diagnostico estadoCovid = 'Positivo'. ].	^hayUnPositivo.	! !!Burbuja methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 16:35'!setNombre: unString	nombre := unString! !!Burbuja methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:37'!agregarPersona: unaPersona		personas add: unaPersona.! !!Burbuja methodsFor: 'initialization' stamp: 'manu 6/17/2021 16:33'!initialize	personas:= OrderedCollection new.	nombre:= ByteString new.! !Error subclass: #BurbujaNoEncontradaError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Object subclass: #Colegio	instanceVariableNames: 'nombre burbujas'	classVariableNames: ''	package: 'TP1'!!Colegio methodsFor: 'accessing' stamp: 'manu 5/19/2021 13:10'!presencialidad	"Recorre la coleccion de burbujas contenida en la clase contando cuantas estan pinchadas. Devuelve	un valor booleano segun +40% de las burbujas estan pinchadas o no."	| cantidadPinchadas promedio|	cantidadPinchadas := burbujas count: [ :burbuja | burbuja estaPinchada ].	promedio := [cantidadPinchadas / (burbujas size)] on: ZeroDivide do: [ ^true ].	"on: ZeroDivide do: [ ^true ]: Es logico que el colegio este habilitado a dar clases presenciales	aun sin tener burbujas 'a las que dar clase'.  "	^ promedio < 0.4.! !!Colegio methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 16:35'!getNombre	^nombre! !!Colegio methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 16:35'!setNombre: unString	nombre := unString! !!Colegio methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:37'!agregarBurbuja: unaBurbuja	burbujas add: unaBurbuja.! !!Colegio methodsFor: 'initialization' stamp: 'manu 6/17/2021 16:37'!initialize	nombre := ByteString new.	burbujas := OrderedCollection new.! !Error subclass: #ColegioNoEncontradoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Object subclass: #CondicionSocial	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!CondicionSocial methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:00'!validar	"Devuelve un valor booleano dependiendo de la clase a la que pertenece. Si es clase 	PoseeCondicionSocial devuelve true, si es NoPoseeCondicionSocial devuelve false."	^self subclassResponsibility! !Object subclass: #Diagnostico	instanceVariableNames: 'sintomas'	classVariableNames: ''	package: 'TP1'!!Diagnostico methodsFor: 'initialization' stamp: 'MANU 5/14/2021 20:37'!initialize	sintomas:= OrderedCollection new.! !!Diagnostico methodsFor: 'as yet unclassified' stamp: 'manu 5/19/2021 13:04'!estadoCovid	"Devuelve un ByteString dependiendo los datos de entrada que reciba un Diagnostico. Puede variar 	entre 'Negativo' 'Sospechoso' y 'Positivo'."	| cantidad habituales hayHabitual|	cantidad := sintomas size.	habituales := #('Tos' 'Fiebre' 'Cansancio').	hayHabitual := sintomas anySatisfy: [ :sintoma | (habituales includes: sintoma) ].		(cantidad = 0) ifTrue: [ ^'Negativo' ].	(cantidad < 3) ifTrue: [ ^'Sospechoso' ].	(cantidad >= 4) ifTrue: [ ^'Positivo' ].	(cantidad = 3 & hayHabitual) ifTrue: [ ^'Positivo' ] ifFalse: [ ^'Sospechoso' ].! !!Diagnostico methodsFor: 'accessing' stamp: 'MANU 5/17/2021 16:08'!setSintomas: unaColeccionDeSintomas	sintomas := unaColeccionDeSintomas.! !CondicionSocial subclass: #Habilitado	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Habilitado methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:01'!validar	^true! !CondicionSocial subclass: #Inhabilitado	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Inhabilitado methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:00'!validar	^false! !Object subclass: #Persona	instanceVariableNames: 'nombre vacuna sintomas esencial contactos riesgo covid burbuja'	classVariableNames: ''	package: 'TP1'!!Persona methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:22'!esEsencial	esencial := Habilitado new.! !!Persona methodsFor: 'as yet unclassified' stamp: 'mau 6/21/2021 13:28'!puedeCircular	"Devuelve un valor bool segun si una instancia tiene las condiciones sociales apropiadas para 	circular."	^ ( vacuna validar | esencial validar ) & sintomas isEmpty & contactos isEmpty & riesgo validar & (burbuja estaPinchada not).! !!Persona methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:38'!agregarSintoma: unSintoma	(sintomas includes: unSintoma) ifTrue: [SintomaExistenteError signal].	sintomas add: unSintoma.	(covid validar) ifTrue: [covid := Inhabilitado new.]! !!Persona methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:22'!esRiesgo	riesgo:= Inhabilitado new.! !!Persona methodsFor: 'as yet unclassified' stamp: 'MANU 5/17/2021 16:48'!getCovid	^covid! !!Persona methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:38'!agregarContacto: unaPersona		contactos add: unaPersona.! !!Persona methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 16:34'!getNombre	^nombre! !!Persona methodsFor: 'as yet unclassified' stamp: 'manu 6/17/2021 17:22'!esVacunadx	vacuna := Habilitado new.! !!Persona methodsFor: 'as yet unclassified' stamp: 'mau 6/21/2021 13:27'!agregarBurbuja: unaBurbuja	burbuja:= unaBurbuja! !!Persona methodsFor: 'as yet unclassified' stamp: 'MANU 5/14/2021 20:31'!getSintomas	^sintomas! !!Persona methodsFor: 'accessing' stamp: 'MANU 5/17/2021 16:47'!getVacuna	^vacuna.! !!Persona methodsFor: 'accessing' stamp: 'MANU 5/13/2021 21:52'!getContactos	^contactos.! !!Persona methodsFor: 'accessing' stamp: 'MANU 5/17/2021 16:47'!getEsencial	^esencial.! !!Persona methodsFor: 'accessing' stamp: 'MANU 5/17/2021 16:47'!getRiesgo	^riesgo.! !!Persona methodsFor: 'initialization' stamp: 'mau 6/21/2021 15:36'!initialize	nombre := ByteString new.		sintomas := OrderedCollection new.	contactos := OrderedCollection new.		vacuna := Inhabilitado  new.	riesgo := Habilitado new.	esencial := Inhabilitado new.	covid := Habilitado new.		burbuja := Burbuja new.! !!Persona methodsFor: 'initialization' stamp: 'manu 6/17/2021 16:34'!setNombre: unString	nombre := unString! !Error subclass: #PersonaNoEncontradaError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Error subclass: #SintomaExistenteError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!